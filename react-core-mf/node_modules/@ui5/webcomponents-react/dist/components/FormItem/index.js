'use client';

import { useIsomorphicId, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { cloneElement, Fragment, isValidElement, useEffect, useMemo } from 'react';
import { WrappingType } from '../../enums/index.js';
import { flattenFragments } from '../../internal/utils.js';
import { Label } from '../../webComponents/Label/index.js';
import { useFormContext, useFormGroupContext } from '../Form/FormContext.js';
import { classNames, styleData } from './FormItem.module.css.js';
function FormItemLabel({
  label,
  style,
  className,
  rowIndex
}) {
  const {
    labelSpan
  } = useFormContext();
  if (typeof label === 'string') {
    return /*#__PURE__*/React.createElement(Label, {
      className: clsx(classNames.label, className),
      style: style,
      wrappingType: WrappingType.Normal,
      "data-label-span": labelSpan,
      showColon: !!label,
      "data-row-index-label": rowIndex
    }, label);
  }
  if ( /*#__PURE__*/isValidElement(label)) {
    const {
      showColon,
      wrappingType,
      style: labelStyle,
      children
    } = label.props;
    return /*#__PURE__*/cloneElement(label, {
      showColon: showColon ?? true,
      wrappingType: wrappingType ?? WrappingType.Normal,
      className: clsx(classNames.label, className, label.props.className),
      style: {
        ...style,
        ...(labelStyle || {})
      },
      'data-label-span': labelSpan,
      'data-row-index-label': rowIndex
    }, children ?? '');
  }
  return null;
}
const getContentForHtmlLabel = label => {
  if (typeof label === 'string') {
    return label;
  } else if ( /*#__PURE__*/isValidElement(label) && typeof label.props?.children === 'string') {
    return label.props.children;
  } else {
    return '';
  }
};

/**
 * A `FormItem` represents a row in a `Form`. A `FormItem` is a combination of one label and a component associated to this label.
 *
 * __Note__: The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.
 */
const FormItem = props => {
  const uniqueId = useIsomorphicId();
  const {
    label,
    children
  } = props;
  const {
    formItems: layoutInfos,
    registerItem,
    unregisterItem,
    labelSpan,
    rowsWithGroup,
    recalcTrigger
  } = useFormContext();
  const groupContext = useFormGroupContext();
  useStylesheet(styleData, FormItem.displayName);
  useEffect(() => {
    registerItem?.(uniqueId, 'formItem', groupContext.id);
    return () => {
      unregisterItem?.(uniqueId, groupContext.id);
    };
  }, [uniqueId, registerItem, unregisterItem, groupContext.id, recalcTrigger]);
  const layoutInfo = useMemo(() => layoutInfos?.find(({
    id: itemId
  }) => uniqueId === itemId), [layoutInfos, uniqueId]);
  if (layoutInfos && !layoutInfo) return null;
  const {
    columnIndex,
    rowIndex,
    lastGroupItem
  } = layoutInfo;
  const gridColumnStart = (columnIndex ?? 0) * 12 + 1;
  const contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan ?? 0) : undefined;
  const calculatedGridRowIndex = (() => {
    if (!layoutInfo.groupId && rowsWithGroup[rowIndex]) {
      return rowIndex + 1;
    } else return rowIndex ?? 0;
  })();
  const calculatedGridRowStart = calculatedGridRowIndex ?? 0;
  const calculatedGridRowStartLabel = labelSpan === 12 ? calculatedGridRowIndex - 1 : calculatedGridRowIndex ?? undefined;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormItemLabel, {
    label: label,
    style: {
      gridColumnStart,
      gridRowStart: calculatedGridRowStartLabel
    },
    rowIndex: calculatedGridRowStartLabel,
    className: clsx(labelSpan !== 12 && lastGroupItem && classNames.lastGroupItem)
  }), /*#__PURE__*/React.createElement("div", {
    "data-id": uniqueId,
    className: clsx(classNames.content, lastGroupItem && classNames.lastGroupItem),
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: rowIndex != null ? calculatedGridRowStart : undefined
    },
    "data-label-span": labelSpan,
    "data-row-index": calculatedGridRowStart
  }, flattenFragments(children).map((child, index) => {
    // @ts-expect-error: type can't be string because of `isValidElement`
    if ( /*#__PURE__*/isValidElement(child) && child.type && child.type.$$typeof !== Symbol.for('react.portal')) {
      const content = getContentForHtmlLabel(label);
      const childId = child?.props?.id;
      return /*#__PURE__*/React.createElement(Fragment, {
        key: `${content}-${uniqueId}-${index}`
      }, /*#__PURE__*/cloneElement(child, {
        id: childId ?? `${uniqueId}-${index}`
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: childId ?? `${uniqueId}-${index}`,
        style: {
          display: 'none'
        },
        "aria-hidden": true
      }, content));
    }
    return undefined;
  })));
};
FormItem.displayName = 'FormItem';
export { FormItem };