'use client';

import { VALUE_STATE_ERROR, VALUE_STATE_INFORMATION, VALUE_STATE_SUCCESS, VALUE_STATE_WARNING } from '@ui5/webcomponents/dist/generated/i18n/i18n-defaults.js';
import alertIcon from '@ui5/webcomponents-icons/dist/alert.js';
import errorIcon from '@ui5/webcomponents-icons/dist/error.js';
import informationIcon from '@ui5/webcomponents-icons/dist/information.js';
import successIcon from '@ui5/webcomponents-icons/dist/sys-enter-2.js';
import { useI18nBundle, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef } from 'react';
import { ValueState } from '../../enums/index.js';
import { ARIA_OBJ_STATUS_DESC, ARIA_OBJ_STATUS_DESC_INACTIVE, EMPTY_VALUE, INDICATION_COLOR } from '../../i18n/i18n-defaults.js';
import { Icon } from '../../webComponents/Icon/index.js';
import { classNames, styleData } from './ObjectStatus.module.css.js';
const getStateSpecifics = (state, showDefaultIcon, userIcon, stateAnnouncementText, i18nTexts) => {
  const {
    indicationColorText,
    errorStateText,
    warningStateText,
    informationStateText,
    successStateText
  } = i18nTexts;
  let icon = userIcon;
  const renderDefaultIcon = showDefaultIcon && !icon;
  let invisibleText = stateAnnouncementText;
  if (!invisibleText && state.startsWith('Indication')) {
    invisibleText = `${indicationColorText} ${state.substring(state.indexOf('0') + 1)}`;
  }
  if (!invisibleText || renderDefaultIcon) {
    switch (state) {
      case ValueState.Error:
        if (renderDefaultIcon) {
          icon = /*#__PURE__*/React.createElement(Icon, {
            name: errorIcon,
            "data-component-name": "ObjectStatusDefaultIcon"
          });
        }
        if (!invisibleText) {
          invisibleText = errorStateText;
        }
        break;
      case ValueState.Success:
        if (renderDefaultIcon) {
          icon = /*#__PURE__*/React.createElement(Icon, {
            name: successIcon,
            "data-component-name": "ObjectStatusDefaultIcon"
          });
        }
        if (!invisibleText) {
          invisibleText = successStateText;
        }
        break;
      case ValueState.Warning:
        if (renderDefaultIcon) {
          icon = /*#__PURE__*/React.createElement(Icon, {
            name: alertIcon,
            "data-component-name": "ObjectStatusDefaultIcon"
          });
        }
        if (!invisibleText) {
          invisibleText = warningStateText;
        }
        break;
      case ValueState.Information:
        if (renderDefaultIcon) {
          icon = /*#__PURE__*/React.createElement(Icon, {
            name: informationIcon,
            "data-component-name": "ObjectStatusDefaultIcon"
          });
        }
        if (!invisibleText) {
          invisibleText = informationStateText;
        }
        break;
    }
  }
  return [icon, invisibleText];
};

/**
 * Status information that can be either text with a value state, or an icon.
 */
const ObjectStatus = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    state,
    showDefaultIcon,
    children,
    icon,
    className,
    style,
    active,
    inverted,
    onClick,
    emptyIndicator,
    stateAnnouncementText,
    large,
    ...rest
  } = props;
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const i18nBundleWc = useI18nBundle('@ui5/webcomponents');
  useStylesheet(styleData, ObjectStatus.displayName);
  const indicationColorText = i18nBundle.getText(INDICATION_COLOR);
  const errorStateText = i18nBundleWc.getText(VALUE_STATE_ERROR);
  const warningStateText = i18nBundleWc.getText(VALUE_STATE_WARNING);
  const informationStateText = i18nBundleWc.getText(VALUE_STATE_INFORMATION);
  const successStateText = i18nBundleWc.getText(VALUE_STATE_SUCCESS);
  const [iconToRender, invisibleText] = getStateSpecifics(state, showDefaultIcon, icon, stateAnnouncementText, {
    indicationColorText,
    errorStateText,
    warningStateText,
    informationStateText,
    successStateText
  });
  const showEmptyIndicator = emptyIndicator && !children;
  const computedChildren = showEmptyIndicator ? /*#__PURE__*/React.createElement("span", {
    "aria-hidden": showEmptyIndicator,
    "data-component-name": "ObjectStatusEmptyIndicator",
    className: classNames.emptyIndicator
  }, "\u2013") : children;
  const objStatusClasses = clsx(classNames.normalizeCSS, classNames.objectStatus, classNames[`${state}`.toLowerCase()], active && classNames.active, inverted && !showEmptyIndicator && classNames.inverted, large && classNames.large, className);
  const TagName = active ? 'button' : 'div';
  return /*#__PURE__*/React.createElement(TagName
  // @ts-expect-error: both refs are allowed (attributes, etc. of HTMLButtonElement should only be used if `active` is `true`)
  , {
    ref: ref,
    className: objStatusClasses,
    style: style,
    onClick: active ? onClick : undefined,
    tabIndex: active ? 0 : undefined,
    "data-icon-only": !children,
    role: active ? 'button' : 'group',
    ...rest
  }, /*#__PURE__*/React.createElement("span", {
    className: classNames.pseudoInvisibleText,
    "data-component-name": "ObjectStatusInvisibleDescriptionContainer"
  }, active ? i18nBundle.getText(ARIA_OBJ_STATUS_DESC) : i18nBundle.getText(ARIA_OBJ_STATUS_DESC_INACTIVE)), iconToRender && /*#__PURE__*/React.createElement("span", {
    className: classNames.icon,
    "data-icon-only": !children,
    "data-component-name": "ObjectStatusIconContainer"
  }, iconToRender), computedChildren && /*#__PURE__*/React.createElement("span", {
    className: classNames.text,
    "data-component-name": "ObjectStatusTextContainer"
  }, computedChildren, showEmptyIndicator && /*#__PURE__*/React.createElement("span", {
    className: classNames.pseudoInvisibleText,
    "data-component-name": "ObjectStatusInvisibleEmptyTextContainer"
  }, i18nBundle.getText(EMPTY_VALUE))), !!invisibleText && (computedChildren || iconToRender) && /*#__PURE__*/React.createElement("span", {
    className: classNames.pseudoInvisibleText,
    "data-component-name": "ObjectStatusInvisibleTextContainer"
  }, invisibleText));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
  state: ValueState.None
};
export { ObjectStatus };