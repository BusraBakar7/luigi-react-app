'use client';

import iconDecline from '@ui5/webcomponents-icons/dist/decline.js';
import iconSearch from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, useI18nBundle, useStylesheet, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useState } from 'react';
import { ButtonDesign, ListMode, ToolbarDesign } from '../../enums/index.js';
import { CANCEL, CLEAR, RESET, SEARCH, SELECT, SELECTED } from '../../i18n/i18n-defaults.js';
import { Button, Dialog, Icon, Input, List, Title } from '../../webComponents/index.js';
import { Text } from '../Text/index.js';
import { Toolbar } from '../Toolbar/index.js';
import { classNames, styleData } from './SelectDialog.module.css.js';
/**
 * The SelectDialog enables users to filter a comprehensive list via a search field and to select one or more items.
 */
const SelectDialog = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    confirmButtonText,
    confirmButtonProps,
    growing,
    headerText,
    headerTextAlignCenter,
    listProps = {},
    mode = ListMode.SingleSelect,
    numberOfSelectedItems,
    rememberSelections,
    showClearButton,
    onAfterClose,
    onClear,
    onConfirm,
    onLoadMore,
    onSearch,
    onSearchInput,
    onSearchReset,
    onBeforeOpen,
    onBeforeClose,
    onAfterOpen,
    onCancel,
    ...rest
  } = props;
  useStylesheet(styleData, SelectDialog.displayName);
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const [searchValue, setSearchValue] = useState('');
  const [selectedItems, setSelectedItems] = useState([]);
  const [componentRef, selectDialogRef] = useSyncRef(ref);
  const [listComponentRef, listRef] = useSyncRef(listProps.ref);
  const handleBeforeOpen = e => {
    const localSelectedItems = listRef.current?.getSelectedItems() ?? [];
    if (typeof onBeforeOpen === 'function') {
      onBeforeOpen(e);
    }
    if (mode === ListMode.MultiSelect && listRef.current?.hasData) {
      setSelectedItems(localSelectedItems);
    }
  };
  const handleAfterOpen = e => {
    if (typeof onAfterOpen === 'function') {
      onAfterOpen(e);
    }
    listRef.current?.focusFirstItem();
  };
  const handleSearchInput = e => {
    if (typeof onSearchInput === 'function') {
      onSearchInput(enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }
    setSearchValue(e.target.value);
  };
  const handleSearchSubmit = e => {
    if (typeof onSearch === 'function') {
      if (e.type === 'keyup' && e.code === 'Enter') {
        onSearch(enrichEventWithDetails(e, {
          value: e.target.value
        }));
      }
      if (e.type === 'click') {
        onSearch(enrichEventWithDetails(e, {
          value: searchValue
        }));
      }
    }
  };
  const handleResetSearch = e => {
    if (typeof onSearchReset === 'function') {
      onSearchReset(enrichEventWithDetails(e, {
        prevValue: searchValue
      }));
    }
    setSearchValue('');
  };
  const handleSelectionChange = e => {
    if (typeof listProps?.onSelectionChange === 'function') {
      listProps.onSelectionChange(e);
    }
    if (mode === ListMode.MultiSelect) {
      setSelectedItems(e.detail.selectedItems);
    } else {
      if (typeof onConfirm === 'function') {
        onConfirm(e);
      }
      selectDialogRef.current.close();
    }
  };
  const handleClose = e => {
    selectDialogRef.current.close();
    if (typeof onCancel === 'function') {
      onCancel(e);
    }
  };
  const handleClear = e => {
    if (typeof onClear === 'function') {
      onClear(enrichEventWithDetails(e, {
        prevSelectedItems: selectedItems
      }));
    }
    setSelectedItems([]);
    listRef.current?.deselectSelectedItems();
  };
  const handleConfirm = e => {
    if (typeof onConfirm === 'function') {
      onConfirm(enrichEventWithDetails(e, {
        selectedItems
      }));
    }
    selectDialogRef.current.close();
  };
  const handleAfterClose = e => {
    if (typeof onAfterClose === 'function') {
      onAfterClose(e);
    }
    if (typeof onSearchReset === 'function') {
      onSearchReset(enrichEventWithDetails(e, {
        prevValue: searchValue
      }));
    }
    setSearchValue('');
    if (!rememberSelections) {
      listRef.current?.deselectSelectedItems();
    }
  };
  const handleBeforeClose = e => {
    if (typeof onBeforeClose === 'function') {
      onBeforeClose(e);
    }
    if (typeof onCancel === 'function' && e.detail.escPressed) {
      onCancel(e);
    }
  };
  return /*#__PURE__*/React.createElement(Dialog, {
    ...rest,
    "data-component-name": "SelectDialog",
    ref: componentRef,
    className: clsx(classNames.dialog, className),
    onAfterClose: handleAfterClose,
    onBeforeOpen: handleBeforeOpen,
    onAfterOpen: handleAfterOpen,
    onBeforeClose: handleBeforeClose
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames.headerContent,
    slot: "header"
  }, showClearButton && headerTextAlignCenter && /*#__PURE__*/React.createElement(Button, {
    onClick: handleClear,
    design: ButtonDesign.Transparent,
    className: classNames.hiddenClearBtn,
    tabIndex: -1,
    "aria-hidden": "true"
  }, i18nBundle.getText(CLEAR)), /*#__PURE__*/React.createElement(Title, {
    className: clsx(classNames.title, headerTextAlignCenter && classNames.titleCenterAlign)
  }, headerText), showClearButton && /*#__PURE__*/React.createElement(Button, {
    onClick: handleClear,
    design: ButtonDesign.Transparent,
    className: classNames.clearBtn
  }, i18nBundle.getText(CLEAR)), /*#__PURE__*/React.createElement(Input, {
    className: classNames.input,
    accessibleName: i18nBundle.getText(SEARCH),
    value: searchValue,
    placeholder: i18nBundle.getText(SEARCH),
    onInput: handleSearchInput,
    onKeyUp: handleSearchSubmit,
    icon: /*#__PURE__*/React.createElement(React.Fragment, null, searchValue && /*#__PURE__*/React.createElement(Icon, {
      accessibleName: i18nBundle.getText(RESET),
      title: i18nBundle.getText(RESET),
      name: iconDecline,
      interactive: true,
      onClick: handleResetSearch,
      className: classNames.inputIcon
    }), /*#__PURE__*/React.createElement(Icon, {
      interactive: true,
      name: iconSearch,
      className: classNames.inputIcon,
      onClick: handleSearchSubmit,
      accessibleName: i18nBundle.getText(SEARCH),
      title: i18nBundle.getText(SEARCH)
    }))
  })), mode === ListMode.MultiSelect && (!!selectedItems.length || numberOfSelectedItems > 0) && /*#__PURE__*/React.createElement(Toolbar, {
    design: ToolbarDesign.Info,
    className: classNames.infoBar
  }, /*#__PURE__*/React.createElement(Text, null, `${i18nBundle.getText(SELECTED)}: ${numberOfSelectedItems ?? selectedItems.length}`)), /*#__PURE__*/React.createElement(List, {
    ...listProps,
    ref: listComponentRef,
    growing: growing,
    onLoadMore: onLoadMore,
    mode: mode,
    onSelectionChange: handleSelectionChange
  }, children), /*#__PURE__*/React.createElement("div", {
    slot: "footer",
    className: classNames.footer
  }, mode === ListMode.MultiSelect && /*#__PURE__*/React.createElement(Button, {
    ...confirmButtonProps,
    onClick: handleConfirm,
    design: ButtonDesign.Emphasized
  }, confirmButtonText ?? i18nBundle.getText(SELECT)), /*#__PURE__*/React.createElement(Button, {
    onClick: handleClose,
    design: ButtonDesign.Transparent
  }, i18nBundle.getText(CANCEL))));
});
SelectDialog.displayName = 'SelectDialog';
export { SelectDialog };