'use client';

import { useI18nBundle, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef } from 'react';
import { EMPTY_VALUE } from '../../i18n/i18n-defaults.js';
import { classNames, styleData } from './Text.module.css.js';
/**
 * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.
 *
 * __Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.
 */
const Text = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    renderWhitespace,
    wrapping = true,
    className,
    style,
    maxLines,
    hyphenated,
    emptyIndicator,
    ...rest
  } = props;
  useStylesheet(styleData, Text.displayName);
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const classNameString = clsx(classNames.text, wrapping === false && classNames.noWrap, renderWhitespace && classNames.renderWhitespace, typeof maxLines === 'number' && classNames.maxLines, hyphenated && classNames.hyphenated, className);
  const showEmptyIndicator = emptyIndicator && !children;
  const computedChildren = showEmptyIndicator ? /*#__PURE__*/React.createElement("span", {
    "aria-hidden": showEmptyIndicator,
    "data-component-name": "TextEmptyIndicator",
    className: classNames.emptyIndicator
  }, "\u2013") : children;
  return /*#__PURE__*/React.createElement("span", {
    ref: ref,
    style: {
      '--_ui5wcr_maxLines': typeof maxLines === 'number' ? maxLines : undefined,
      ...style
    },
    className: classNameString,
    ...rest
  }, computedChildren, showEmptyIndicator && /*#__PURE__*/React.createElement("span", {
    className: classNames.pseudoInvisibleText,
    "data-component-name": "TextEmptyTextContainer"
  }, i18nBundle.getText(EMPTY_VALUE)));
});
Text.displayName = 'Text';
export { Text };