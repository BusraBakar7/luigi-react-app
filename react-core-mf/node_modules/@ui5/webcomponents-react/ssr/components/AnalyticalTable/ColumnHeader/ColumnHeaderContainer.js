import { useStylesheet } from '@ui5/webcomponents-react-base';
import React, { forwardRef, Fragment } from 'react';
import { classNames, styleData } from './Resizer.module.css.js';
import { ColumnHeader } from './index.js';
export const ColumnHeaderContainer = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    headerProps,
    headerGroup,
    onSort,
    onGroupByChanged,
    resizeInfo,
    isRtl,
    portalContainer,
    columnVirtualizer,
    uniqueId,
    showVerticalEndBorder
  } = props;
  useStylesheet(styleData, 'Resizer');
  return /*#__PURE__*/React.createElement("div", {
    ...headerProps,
    style: {
      width: `${columnVirtualizer.getTotalSize()}px`
    },
    ref: ref,
    "data-component-name": "AnalyticalTableHeaderRow"
  }, columnVirtualizer.getVirtualItems().map((virtualColumn, index) => {
    const column = headerGroup.headers[virtualColumn.index];
    if (!column) {
      return null;
    }
    const isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
    const resizerDirectionStyle = isRtl ? {
      right: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
      transform: 'translateX(50%)'
    } : {
      left: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
      transform: 'translateX(-50%)'
    };
    const {
      key,
      ...rest
    } = column.getHeaderProps();
    return /*#__PURE__*/React.createElement(Fragment, {
      key: key
    }, column.canResize && column.getResizerProps && /*#__PURE__*/React.createElement("div", {
      ...column.getResizerProps(),
      "data-resizer": true,
      className: classNames.resizer,
      style: resizerDirectionStyle
    }), /*#__PURE__*/React.createElement(ColumnHeader, {
      ...rest,
      showVerticalEndBorder: showVerticalEndBorder,
      id: `${uniqueId}${rest?.id ?? ''}`,
      columnId: rest.id,
      visibleColumnIndex: index,
      onSort: onSort,
      onGroupBy: onGroupByChanged,
      headerTooltip: column.headerTooltip,
      isDraggable: (column.canReorder || !column.disableDragAndDrop) && !resizeInfo.isResizingColumn,
      virtualColumn: virtualColumn,
      columnVirtualizer: columnVirtualizer,
      isRtl: isRtl,
      portalContainer: portalContainer
    }, column.render('Header')));
  }));
});
ColumnHeaderContainer.displayName = 'ColumnHeaderContainer';