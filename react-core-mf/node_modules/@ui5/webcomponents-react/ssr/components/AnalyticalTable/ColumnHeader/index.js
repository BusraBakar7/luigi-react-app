import iconFilter from '@ui5/webcomponents-icons/dist/filter.js';
import iconGroup from '@ui5/webcomponents-icons/dist/group-2.js';
import iconSortAscending from '@ui5/webcomponents-icons/dist/sort-ascending.js';
import iconSortDescending from '@ui5/webcomponents-icons/dist/sort-descending.js';
import { ThemingParameters, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { useRef, useState } from 'react';
import { Icon } from '../../../webComponents/Icon/index.js';
import { Text } from '../../Text/index.js';
import { classNames, styleData } from './ColumnHeader.module.css.js';
import { ColumnHeaderModal } from './ColumnHeaderModal.js';
export const ColumnHeader = props => {
  useStylesheet(styleData, ColumnHeader.displayName);
  const {
    id,
    children,
    column,
    columnId,
    className,
    style,
    onSort,
    onGroupBy,
    onDragEnter,
    onDragOver,
    onDragStart,
    onDrop,
    onDragEnd,
    headerTooltip,
    isDraggable,
    dragOver,
    role,
    virtualColumn,
    columnVirtualizer,
    isRtl,
    visibleColumnIndex,
    onClick,
    onKeyDown,
    portalContainer,
    isFiltered,
    title,
    'aria-label': ariaLabel,
    'aria-sort': ariaSort,
    showVerticalEndBorder
  } = props;
  const columnIndex = virtualColumn.index;
  const [popoverOpen, setPopoverOpen] = useState(false);
  const columnHeaderRef = useRef(null);
  const tooltip = (() => {
    if (headerTooltip) {
      return headerTooltip;
    }
    if (typeof children === 'string') {
      return children;
    }
    return null;
  })();
  const textStyle = (() => {
    let margin = 0;
    const style = {};
    if (column.hAlign) {
      style.textAlign = column.hAlign.toLowerCase();
    }
    if (column.isSorted) margin++;
    if (column.isGrouped) margin++;
    if (isFiltered) margin++;
    if (margin === 0) {
      return style;
    }
    if (margin > 0) margin += 0.5;
    style.marginInlineEnd = `${margin}rem`;
    return style;
  })();
  const hasPopover = column.canGroupBy || column.canSort || column.canFilter;
  const handleHeaderCellClick = e => {
    onClick?.(e);
    if (hasPopover) {
      setPopoverOpen(true);
    }
  };
  const directionStyles = isRtl ? {
    right: 0,
    transform: `translateX(-${virtualColumn.start}px)`
  } : {
    left: 0,
    transform: `translateX(${virtualColumn.start}px)`
  };
  const handleHeaderCellKeyDown = e => {
    onKeyDown?.(e);
    if (hasPopover && e.code === 'Enter') {
      setPopoverOpen(true);
    }
    if (e.code === 'Space') {
      e.preventDefault();
    }
  };
  const handleHeaderCellKeyUp = e => {
    if (hasPopover && e.code === 'Space' && !e.target.hasAttribute('ui5-li')) {
      setPopoverOpen(true);
    }
  };
  if (!column) return null;
  return /*#__PURE__*/React.createElement("div", {
    ref: columnHeaderRef,
    className: clsx(classNames.thContainer, showVerticalEndBorder && classNames.verticalEndBorder),
    style: {
      position: 'absolute',
      top: 0,
      width: `${virtualColumn.size}px`,
      ...directionStyles
    }
  }, /*#__PURE__*/React.createElement("div", {
    ref: columnVirtualizer.measureElement,
    "data-visible-column-index": visibleColumnIndex,
    "data-visible-row-index": 0,
    "data-row-index": 0,
    "data-column-index": columnIndex,
    tabIndex: -1,
    id: id,
    className: className,
    style: {
      ...style,
      borderInlineStart: dragOver ? `3px solid ${ThemingParameters.sapSelectedColor}` : undefined
    },
    "aria-haspopup": hasPopover ? 'menu' : undefined,
    role: role,
    draggable: isDraggable,
    onDragEnter: onDragEnter,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onDragEnd: onDragEnd,
    "data-column-id": columnId,
    onClick: handleHeaderCellClick,
    onKeyDown: handleHeaderCellKeyDown,
    onKeyUp: handleHeaderCellKeyUp,
    "aria-label": ariaLabel,
    "aria-sort": ariaSort,
    title: title
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames.header,
    "data-h-align": column.hAlign
  }, /*#__PURE__*/React.createElement(Text, {
    title: tooltip,
    wrapping: false,
    style: textStyle,
    className: clsx(classNames.text, columnId === '__ui5wcr__internal_selection_column' && classNames.selectAllCheckBoxContainer),
    "data-component-name": `AnalyticalTableHeaderHeaderContentContainer-${columnId}`
  }, children), /*#__PURE__*/React.createElement("div", {
    className: classNames.iconContainer,
    "data-component-name": `AnalyticalTableHeaderIconsContainer-${columnId}`
  }, isFiltered && /*#__PURE__*/React.createElement(Icon, {
    name: iconFilter,
    "aria-hidden": true
  }), column.isSorted && /*#__PURE__*/React.createElement(Icon, {
    name: column.isSortedDesc ? iconSortDescending : iconSortAscending,
    "aria-hidden": true
  }), column.isGrouped && /*#__PURE__*/React.createElement(Icon, {
    name: iconGroup,
    "aria-hidden": true
  }))), hasPopover && popoverOpen && /*#__PURE__*/React.createElement(ColumnHeaderModal, {
    isRtl: isRtl,
    column: column,
    onSort: onSort,
    onGroupBy: onGroupBy,
    openerRef: columnHeaderRef,
    open: popoverOpen,
    setPopoverOpen: setPopoverOpen,
    portalContainer: portalContainer
  })));
};
ColumnHeader.displayName = 'ColumnHeader';