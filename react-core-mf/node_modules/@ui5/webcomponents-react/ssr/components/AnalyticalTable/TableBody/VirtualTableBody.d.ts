import type { Virtualizer } from '@tanstack/react-virtual';
import type { MutableRefObject, ReactNode } from 'react';
import React from 'react';
import type { AnalyticalTablePropTypes, DivWithCustomScrollProp, ScrollToRefType, TriggerScrollState } from '../types/index.js';
interface VirtualTableBodyProps {
    classes: Record<string, string>;
    prepareRow: (row: unknown) => void;
    rows: Record<string, any>[];
    itemCount: number;
    scrollToRef: MutableRefObject<ScrollToRefType>;
    isTreeTable: boolean;
    internalRowHeight: number;
    visibleRows: number;
    alternateRowColor: boolean;
    overscanCount: number;
    visibleColumns: Record<string, unknown>[];
    parentRef: MutableRefObject<HTMLDivElement>;
    renderRowSubComponent: (row?: Record<string, unknown>) => ReactNode;
    popInRowHeight: number;
    isRtl: boolean;
    markNavigatedRow?: AnalyticalTablePropTypes['markNavigatedRow'];
    alwaysShowSubComponent: boolean;
    dispatch?: (e: {
        type: string;
        payload?: Record<string, unknown>;
    }) => void;
    subComponentsHeight?: Record<string, {
        rowId: string;
        subComponentHeight?: number;
    }>;
    columnVirtualizer: Virtualizer<DivWithCustomScrollProp, Element>;
    manualGroupBy?: boolean;
    subRowsKey: string;
    scrollContainerRef?: MutableRefObject<HTMLDivElement>;
    subComponentsBehavior: AnalyticalTablePropTypes['subComponentsBehavior'];
    triggerScroll?: TriggerScrollState;
}
export declare const VirtualTableBody: (props: VirtualTableBodyProps) => React.JSX.Element;
export {};
