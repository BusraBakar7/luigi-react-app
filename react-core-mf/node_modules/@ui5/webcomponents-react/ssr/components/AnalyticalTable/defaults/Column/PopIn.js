import { useStylesheet } from '@ui5/webcomponents-react-base';
import React from 'react';
import { makeRenderer } from 'react-table';
import { FlexBoxAlignItems, FlexBoxDirection, FlexBoxWrap } from '../../../../enums/index.js';
import { FlexBox } from '../../../FlexBox/index.js';
import { Text } from '../../../Text/index.js';
import { classNames, styleData } from './PopIn.module.css.js';
export const PopIn = instance => {
  const {
    state,
    contentToRender,
    cell,
    row,
    internalRowHeight
  } = instance;
  useStylesheet(styleData, PopIn.displayName);
  return /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classNames.container
  }, /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: contentToRender !== 'Grouped' && contentToRender !== 'Expandable' ? FlexBoxAlignItems.Start : FlexBoxAlignItems.Center,
    wrap: FlexBoxWrap.NoWrap,
    className: classNames.defaultCell,
    style: {
      height: internalRowHeight
    }
  }, cell.render(contentToRender)), contentToRender !== 'Grouped' && state.popInColumns?.map(item => {
    const popInInstanceProps = row.allCells.find(cell => cell.column.id === item.id);
    const renderHeader = () => {
      if (item.column.PopInHeader) {
        return typeof item.column.PopInHeader === 'function' ? item.column.PopInHeader({
          ...instance,
          ...popInInstanceProps
        }) : item.column.PopInHeader;
      }
      return typeof item.column.Header === 'function' ? makeRenderer({
        ...instance,
        ...popInInstanceProps
      }, item.column)(item.column.Header) : item.column.Header;
    };
    const renderCell = () => {
      if (item.column?.Cell) {
        const cell = item.column.Cell;
        if (typeof cell === 'string') {
          return /*#__PURE__*/React.createElement(Text, {
            wrapping: false,
            title: cell
          }, cell);
        }
        return makeRenderer({
          ...instance,
          ...popInInstanceProps,
          isPopIn: true
        }, item.column)(item.column.Cell);
      }
      return popInInstanceProps?.value ? /*#__PURE__*/React.createElement(Text, {
        wrapping: false,
        title: popInInstanceProps.value
      }, popInInstanceProps.value) : null;
    };
    return /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      key: item.id
    }, item.column?.Header && /*#__PURE__*/React.createElement("div", {
      className: classNames.header
    }, renderHeader(), ":"), /*#__PURE__*/React.createElement("div", {
      style: {
        height: internalRowHeight
      }
    }, popInInstanceProps && renderCell()));
  }));
};
PopIn.displayName = 'PopIn';