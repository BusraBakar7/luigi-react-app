'use client';

import { debounce, Device, useStylesheet, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState } from 'react';
import { FlexBoxAlignItems, FlexBoxJustifyContent, ToolbarDesign, ToolbarStyle } from '../../enums/index.js';
import { stopPropagation } from '../../internal/stopPropagation.js';
import { flattenFragments } from '../../internal/utils.js';
import { FlexBox } from '../FlexBox/index.js';
import { Toolbar } from '../Toolbar/index.js';
import { ToolbarSeparator } from '../ToolbarSeparator/index.js';
import { ActionsSpacer } from './ActionsSpacer.js';
import { classNames, styleData } from './DynamicPageTitle.module.css.js';
const enhanceActionsWithClick = (actions, ref) => flattenFragments(actions, Infinity).map(action => {
  if ( /*#__PURE__*/isValidElement(action)) {
    return /*#__PURE__*/cloneElement(action, {
      // @ts-expect-error: only actionable elements should be passed to either of the `action` props
      onClick: e => {
        if (typeof action.props?.onClick === 'function') {
          action.props.onClick(e);
        }
        if (ref.current?.isOpen() && !e.defaultPrevented) {
          ref.current.close();
        }
      }
    });
  }
});

/**
 * The `DynamicPageTitle` component is part of the `DynamicPage` family and is used to serve as title of the `DynamicPage` and `ObjectPage`.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 *
 * __Note:__ When used inside a custom component, it's essential to pass through all props, as otherwise the component won't function as intended!
 */
const DynamicPageTitle = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    actions,
    breadcrumbs,
    children,
    header,
    subHeader,
    showSubHeaderRight,
    navigationActions,
    className,
    style,
    onToggleHeaderContentVisibility,
    actionsToolbarProps,
    navigationActionsToolbarProps,
    expandedContent,
    snappedContent,
    ...rest
  } = props;
  useStylesheet(styleData, DynamicPageTitle.displayName);
  const [componentRef, dynamicPageTitleRef] = useSyncRef(ref);
  const [showNavigationInTopArea, setShowNavigationInTopArea] = useState(undefined);
  const isMounted = useRef(false);
  const [isPhone, setIsPhone] = useState(Device.getCurrentRange(dynamicPageTitleRef.current?.getBoundingClientRect().width)?.name === 'Phone');
  const containerClasses = clsx(classNames.container, isPhone && classNames.phone, className);
  const [actionsOverflowRef, syncedActionsOverflowRef] = useSyncRef(actionsToolbarProps?.overflowPopoverRef ?? null);
  const [navActionsOverflowRef, syncedNavActionsOverflowRef] = useSyncRef(navigationActionsToolbarProps?.overflowPopoverRef ?? null);
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, [isMounted]);
  const {
    onClick: _0,
    ...propsWithoutOmitted
  } = rest;
  const onHeaderClick = useCallback(e => {
    if (typeof props?.onClick === 'function') {
      props.onClick(e);
    }
    if (typeof onToggleHeaderContentVisibility === 'function' && !props?.['data-not-clickable']) {
      onToggleHeaderContentVisibility(e);
    }
  }, [props?.onClick, onToggleHeaderContentVisibility, props?.['data-not-clickable']]);
  useEffect(() => {
    const debouncedObserverFn = debounce(([titleContainer]) => {
      // Firefox implements `borderBoxSize` as a single content rect, rather than an array
      const borderBoxSize = Array.isArray(titleContainer.borderBoxSize) ? titleContainer.borderBoxSize[0] : titleContainer.borderBoxSize;
      // Safari doesn't implement `borderBoxSize`
      const titleContainerWidth = borderBoxSize?.inlineSize ?? titleContainer.target.getBoundingClientRect().width;
      setIsPhone(Device.getCurrentRange(titleContainerWidth)?.name === 'Phone');
      if (titleContainerWidth < 1280 && !showNavigationInTopArea === true && isMounted.current) {
        setShowNavigationInTopArea(true);
      } else if (titleContainerWidth >= 1280 && !showNavigationInTopArea === false && isMounted.current) {
        setShowNavigationInTopArea(false);
      }
    }, 150);
    const observer = new ResizeObserver(debouncedObserverFn);
    if (dynamicPageTitleRef.current) {
      observer.observe(dynamicPageTitleRef.current);
    }
    return () => {
      debouncedObserverFn.cancel();
      observer.disconnect();
    };
  }, [dynamicPageTitleRef.current, showNavigationInTopArea, isMounted]);
  const handleActionsToolbarClick = e => {
    stopPropagation(e);
    if (typeof actionsToolbarProps?.onClick === 'function') {
      actionsToolbarProps.onClick(e);
    }
  };
  const handleNavigationActionsToolbarClick = e => {
    stopPropagation(e);
    if (typeof navigationActionsToolbarProps?.onClick === 'function') {
      navigationActionsToolbarProps.onClick(e);
    }
  };
  return /*#__PURE__*/React.createElement(FlexBox, {
    className: containerClasses,
    style: style,
    ref: componentRef,
    "data-component-name": "DynamicPageTitle",
    onClick: onHeaderClick,
    ...propsWithoutOmitted
  }, (breadcrumbs || navigationActions && showNavigationInTopArea) && /*#__PURE__*/React.createElement(FlexBox, {
    justifyContent: FlexBoxJustifyContent.SpaceBetween,
    "data-component-name": "DynamicPageTitleBreadcrumbs"
  }, breadcrumbs && /*#__PURE__*/React.createElement("div", {
    className: classNames.breadcrumbs,
    onClick: stopPropagation
  }, breadcrumbs), navigationActions && showNavigationInTopArea && /*#__PURE__*/React.createElement(Toolbar, {
    tabIndex: undefined,
    role: undefined,
    ...navigationActionsToolbarProps,
    overflowButton: navigationActionsToolbarProps?.overflowButton,
    className: clsx(classNames.toolbar, navigationActionsToolbarProps?.className),
    onClick: handleNavigationActionsToolbarClick,
    "data-component-name": "DynamicPageTitleNavActions",
    onOverflowChange: navigationActionsToolbarProps?.onOverflowChange,
    overflowPopoverRef: navActionsOverflowRef,
    design: ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.Clear,
    active: true
  }, /*#__PURE__*/React.createElement(ActionsSpacer, {
    onClick: onHeaderClick,
    noHover: props?.['data-not-clickable']
  }), enhanceActionsWithClick(navigationActions, syncedNavActionsOverflowRef))), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    className: classNames.middleSection,
    "data-component-name": "DynamicPageTitleMiddleSection"
  }, /*#__PURE__*/React.createElement(FlexBox, {
    className: classNames.titleMainSection
  }, header && /*#__PURE__*/React.createElement("div", {
    className: classNames.title,
    "data-component-name": "DynamicPageTitleHeader"
  }, header), subHeader && showSubHeaderRight && /*#__PURE__*/React.createElement("div", {
    className: classNames.subTitle,
    "data-component-name": "DynamicPageTitleSubHeader"
  }, subHeader), children && /*#__PURE__*/React.createElement("div", {
    className: classNames.content,
    "data-component-name": "DynamicPageTitleContent"
  }, children)), (actions || !showNavigationInTopArea && navigationActions) && /*#__PURE__*/React.createElement(Toolbar, {
    tabIndex: undefined,
    role: undefined,
    ...actionsToolbarProps,
    overflowButton: actionsToolbarProps?.overflowButton,
    design: ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.Clear,
    active: true,
    className: clsx(classNames.toolbar, actionsToolbarProps?.className),
    onClick: handleActionsToolbarClick,
    "data-component-name": "DynamicPageTitleActions",
    onOverflowChange: actionsToolbarProps?.onOverflowChange,
    overflowPopoverRef: actionsOverflowRef
  }, /*#__PURE__*/React.createElement(ActionsSpacer, {
    onClick: onHeaderClick,
    noHover: props?.['data-not-clickable']
  }), enhanceActionsWithClick(actions, syncedActionsOverflowRef), !showNavigationInTopArea && Children.count(actions) > 0 && Children.count(navigationActions) > 0 && /*#__PURE__*/React.createElement(ToolbarSeparator, null), !showNavigationInTopArea && enhanceActionsWithClick(navigationActions, syncedActionsOverflowRef))), subHeader && !showSubHeaderRight && /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement("div", {
    className: clsx(classNames.subTitle, classNames.subTitleBottom),
    "data-component-name": "DynamicPageTitleSubHeader"
  }, subHeader)), props?.['data-header-content-visible'] ? expandedContent : props['data-is-snapped-rendered-outside'] ? undefined : snappedContent);
});
DynamicPageTitle.displayName = 'DynamicPageTitle';
export { DynamicPageTitle };