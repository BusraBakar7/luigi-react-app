import type { Dispatch, MutableRefObject, ReactElement, SetStateAction } from 'react';
import React from 'react';
import type { Ui5CustomEvent } from '../../types/index.js';
import type { DialogDomRef, TableDomRef, TableRowDomRef } from '../../webComponents/index.js';
import type { FilterGroupItemInternalProps } from '../FilterGroupItem/types.js';
import type { FilterBarPropTypes } from './types.js';
interface FilterDialogPropTypes {
    filterBarRefs: any;
    open: boolean;
    handleDialogClose: (event: Ui5CustomEvent<DialogDomRef>) => void;
    children: ReactElement<FilterGroupItemInternalProps>[];
    showRestoreButton: boolean;
    handleRestoreFilters: (e: any, source: any, filterElements: any) => void;
    handleDialogSave: (e: any, newRefs: any, updatedToggledFilters: any, orderedChildren: any) => void;
    handleSearchValueChange: Dispatch<SetStateAction<string>>;
    handleSelectionChange?: (event: Ui5CustomEvent<TableDomRef, {
        element: TableRowDomRef;
        checked: boolean;
        selectedRows: unknown[];
        previouslySelectedRows: unknown[];
    }>) => void;
    handleDialogSearch?: (event: CustomEvent<{
        value: string;
        element: HTMLElement;
    }>) => void;
    handleDialogCancel?: (event: Ui5CustomEvent<HTMLElement>) => void;
    portalContainer: Element;
    onAfterFiltersDialogOpen: (event: Ui5CustomEvent<DialogDomRef>) => void;
    dialogRef: MutableRefObject<DialogDomRef>;
    enableReordering?: FilterBarPropTypes['enableReordering'];
    isPhone?: boolean;
}
export declare const FilterDialog: (props: FilterDialogPropTypes) => React.JSX.Element;
export {};
