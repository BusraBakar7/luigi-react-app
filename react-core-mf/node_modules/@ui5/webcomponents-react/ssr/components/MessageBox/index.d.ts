import type { ReactNode } from 'react';
import React from 'react';
import { MessageBoxActions, MessageBoxTypes } from '../../enums/index.js';
import type { DialogDomRef, DialogPropTypes } from '../../webComponents/index.js';
type MessageBoxAction = MessageBoxActions | keyof typeof MessageBoxActions | string;
export interface MessageBoxPropTypes extends Omit<DialogPropTypes, 'children' | 'footer' | 'headerText' | 'onAfterClose' | 'state' | 'accessibleNameRef' | 'open' | 'initialFocus'> {
    /**
     * Defines the IDs of the elements that label the component.
     *
     * __Note:__ Per default the prop receives the IDs of the header and the content.
     */
    accessibleNameRef?: DialogPropTypes['accessibleNameRef'];
    /**
     * Flag whether the Message Box should be opened or closed
     */
    open?: DialogPropTypes['open'];
    /**
     * A custom title for the MessageBox. If not present, it will be derived from the `MessageBox` type.
     */
    titleText?: DialogPropTypes['headerText'];
    /**
     * Defines the content of the `MessageBox`.
     *
     * **Note:** Although this prop accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design and a11y capabilities.
     */
    children: ReactNode | ReactNode[];
    /**
     * Array of actions of the MessageBox. Those actions will be transformed into buttons in the `MessageBox` footer.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `MessageBoxAction`s (text) or the `Button` component in order to preserve the intended.
     */
    actions?: (MessageBoxAction | ReactNode)[];
    /**
     * Specifies which action of the created dialog will be emphasized.
     *
     * @since 0.16.3
     */
    emphasizedAction?: MessageBoxAction;
    /**
     * A custom icon. If not present, it will be derived from the `MessageBox` type.
     */
    icon?: ReactNode;
    /**
     * Defines the type of the `MessageBox` with predefined title, icon, actions and a visual highlight color.
     */
    type?: MessageBoxTypes | keyof typeof MessageBoxTypes;
    /**
     * Defines the ID of the HTML Element or the `MessageBoxAction`, which will get the initial focus.
     */
    initialFocus?: MessageBoxAction;
    /**
     * Callback to be executed when the `MessageBox` is closed (either by pressing on one of the `actions` or by pressing the `ESC` key). `event.detail.action` contains the pressed action button.
     */
    onClose?: (event: CustomEvent<{
        action: MessageBoxAction;
    }>) => void;
}
/**
 * The `MessageBox` component provides easier methods to create a `Dialog`, such as standard alerts, confirmation dialogs, or arbitrary message dialogs.
 * For convenience, it also provides an `open` prop, so it is not necessary to attach a `ref` to open the `MessageBox`.
 */
declare const MessageBox: React.ForwardRefExoticComponent<MessageBoxPropTypes & React.RefAttributes<DialogDomRef>>;
export { MessageBox };
