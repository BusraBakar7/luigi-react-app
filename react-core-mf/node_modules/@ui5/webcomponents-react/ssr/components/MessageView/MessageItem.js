'use client';

import iconArrowRight from '@ui5/webcomponents-icons/dist/slim-arrow-right.js';
import { useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useContext } from 'react';
import { FlexBoxAlignItems, FlexBoxDirection, ListItemType, ValueState } from '../../enums/index.js';
import { MessageViewContext } from '../../internal/MessageViewContext.js';
import { CustomListItem } from '../../webComponents/CustomListItem/index.js';
import { Icon } from '../../webComponents/Icon/index.js';
import { Label } from '../../webComponents/Label/index.js';
import { FlexBox } from '../FlexBox/index.js';
import { classNames, styleData } from './MessageItem.module.css.js';
import { getIconNameForType } from './utils.js';
/**
 * A component used to hold different types of system messages inside the `MessageView` component.
 */
const MessageItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    titleText,
    subtitleText,
    counter,
    type = ValueState.Error,
    children,
    className,
    ...rest
  } = props;
  useStylesheet(styleData, MessageItem.displayName);
  const {
    selectMessage
  } = useContext(MessageViewContext);
  const listItemClasses = clsx(classNames.listItem, Reflect.get(classNames, `type${type}`), className, subtitleText && classNames.withSubtitle);
  const messageClasses = clsx(classNames.message, children && classNames.withChildren);
  const handleListItemClick = e => {
    if (children) {
      selectMessage(props);
      if (typeof rest.onClick === 'function') {
        rest.onClick(e);
      }
    }
  };
  const handleKeyDown = e => {
    if (typeof rest.onKeyDown === 'function') {
      rest.onKeyDown(e);
    }
    if (e.code === 'Enter') {
      handleListItemClick(e);
    }
  };
  return /*#__PURE__*/React.createElement(CustomListItem, {
    onClick: handleListItemClick,
    onKeyDown: handleKeyDown,
    "data-title": titleText,
    "data-type": type,
    type: children ? ListItemType.Active : ListItemType.Inactive,
    ...rest,
    className: listItemClasses,
    ref: ref
  }, /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    className: messageClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames.iconContainer
  }, /*#__PURE__*/React.createElement(Icon, {
    name: getIconNameForType(type),
    className: classNames.icon
  })), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    style: {
      flex: 'auto',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }
  }, titleText && /*#__PURE__*/React.createElement("span", {
    className: classNames.title
  }, titleText), subtitleText && /*#__PURE__*/React.createElement(Label, {
    className: classNames.subtitle
  }, subtitleText)), counter != null && /*#__PURE__*/React.createElement("span", {
    className: classNames.counter
  }, counter), children && /*#__PURE__*/React.createElement(Icon, {
    className: classNames.navigation,
    name: iconArrowRight
  })));
});
MessageItem.displayName = 'MessageItem';
export { MessageItem };