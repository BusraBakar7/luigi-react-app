import iconOverflow from '@ui5/webcomponents-icons/dist/overflow.js';
import { Device, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { cloneElement, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { ButtonDesign, PopoverPlacementType, PopupAccessibleRole } from '../../enums/index.js';
import { getOverflowPopoverContext } from '../../internal/OverflowPopoverContext.js';
import { useCanRenderPortal } from '../../internal/ssr.js';
import { stopPropagation } from '../../internal/stopPropagation.js';
import { getUi5TagWithSuffix } from '../../internal/utils.js';
import { Popover, ToggleButton } from '../../webComponents/index.js';
const isPhone = Device.isPhone();
export const OverflowPopover = props => {
  const {
    lastVisibleIndex,
    classes,
    children,
    portalContainer,
    overflowContentRef,
    numberOfAlwaysVisibleItems,
    showMoreText,
    overflowButton,
    overflowPopoverRef,
    setIsMounted,
    a11yConfig
  } = props;
  const [pressed, setPressed] = useState(false);
  const toggleBtnRef = useRef(null);
  const [componentRef, popoverRef] = useSyncRef(overflowPopoverRef);
  useEffect(() => {
    setIsMounted(true);
    return () => {
      setIsMounted(false);
    };
  }, []);
  const handleToggleButtonClick = e => {
    e.stopPropagation();
    setPressed(prev => {
      if (!prev) {
        if (popoverRef.current) {
          popoverRef.current.opener = e.target;
        }
        return true;
      }
      return false;
    });
  };
  const handleBeforeOpen = () => {
    if (toggleBtnRef.current) {
      toggleBtnRef.current.accessibilityAttributes = {
        expanded: true,
        hasPopup: 'Menu'
      };
    }
  };
  const handleAfterOpen = () => {
    setPressed(true);
  };
  const handleClose = e => {
    if (toggleBtnRef.current) {
      toggleBtnRef.current.accessibilityAttributes = {
        expanded: false,
        hasPopup: 'Menu'
      };
    }
    stopPropagation(e);
    setPressed(false);
  };
  useEffect(() => {
    const tagName = getUi5TagWithSuffix('ui5-toggle-button');
    customElements.whenDefined(tagName).then(() => {
      if (toggleBtnRef.current) {
        toggleBtnRef.current.accessibilityAttributes = {
          expanded: pressed,
          hasPopup: 'Menu'
        };
      }
    });
  }, []);
  const clonedOverflowButtonClick = e => {
    if (typeof overflowButton?.props?.onClick === 'function') {
      overflowButton.props.onClick(e);
    }
    if (!e.defaultPrevented) {
      handleToggleButtonClick(e);
    }
  };
  const canRenderPortal = useCanRenderPortal();
  const accessibleRole = (() => {
    if (a11yConfig?.overflowPopover?.contentRole) {
      return PopupAccessibleRole.None;
    }
    return a11yConfig?.overflowPopover?.role;
  })();
  const OverflowPopoverContextProvider = getOverflowPopoverContext().Provider;
  return /*#__PURE__*/React.createElement(OverflowPopoverContextProvider, {
    value: {
      inPopover: true
    }
  }, overflowButton ? ( /*#__PURE__*/cloneElement(overflowButton, {
    onClick: clonedOverflowButtonClick
  })) : /*#__PURE__*/React.createElement(ToggleButton, {
    ref: toggleBtnRef,
    design: ButtonDesign.Transparent,
    icon: iconOverflow,
    onClick: handleToggleButtonClick,
    pressed: pressed,
    accessibleName: showMoreText,
    tooltip: showMoreText,
    "data-component-name": "ToolbarOverflowButton"
  }), canRenderPortal && /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popover, {
    "data-component-name": "ToolbarOverflowPopover",
    className: clsx(classes.popover, isPhone && classes.popoverPhone),
    placementType: PopoverPlacementType.Bottom,
    ref: componentRef,
    open: pressed,
    onAfterClose: handleClose,
    onBeforeOpen: handleBeforeOpen,
    onAfterOpen: handleAfterOpen,
    hideArrow: true,
    accessibleRole: accessibleRole
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.popoverContent,
    ref: overflowContentRef,
    role: a11yConfig?.overflowPopover?.contentRole,
    "data-component-name": "ToolbarOverflowPopoverContent"
  }, children.map((item, index) => {
    if (index > lastVisibleIndex && index > numberOfAlwaysVisibleItems - 1) {
      // @ts-expect-error: if props is not defined, it doesn't have an id (is not a ReactElement)
      if (item?.props?.id) {
        // @ts-expect-error: item is ReactElement
        return /*#__PURE__*/cloneElement(item, {
          id: `${item.props.id}-overflow`
        });
      }
      // @ts-expect-error: if type is not defined, it's not a spacer
      if (item.type?.displayName === 'ToolbarSeparator') {
        return /*#__PURE__*/cloneElement(item, {
          style: {
            height: '0.0625rem',
            margin: '0.375rem 0.1875rem',
            width: '100%'
          }
        });
      }
      return item;
    }
    return null;
  }))), portalContainer ?? document.body));
};