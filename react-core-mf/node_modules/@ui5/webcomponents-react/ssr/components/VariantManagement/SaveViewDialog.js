import { enrichEventWithDetails, useI18nBundle, useIsomorphicId, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { BarDesign, ButtonDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums/index.js';
import { APPLY_AUTOMATICALLY, CANCEL, PUBLIC, SAVE, SAVE_VIEW, SET_AS_DEFAULT, SPECIFY_VIEW_NAME, VARIANT_MANAGEMENT_ERROR_DUPLICATE, VIEW } from '../../i18n/i18n-defaults.js';
import { useCanRenderPortal } from '../../internal/ssr.js';
import { trimAndRemoveSpaces } from '../../internal/utils.js';
import { Bar, Button, CheckBox, Dialog, Input, Label } from '../../webComponents/index.js';
import { FlexBox } from '../FlexBox/index.js';
import { classNames, styleData } from './SaveViewDialog.module.css.js';
export const SaveViewDialog = props => {
  const {
    onAfterClose,
    handleSave,
    selectedVariant,
    showShare,
    showApplyAutomatically,
    showSetAsDefault,
    variantNames,
    portalContainer,
    saveViewInputProps,
    onSaveViewCancel
  } = props;
  const saveViewDialogRef = useRef(null);
  const inputRef = useRef(undefined);
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  useStylesheet(styleData, 'SaveViewDialog');
  const uniqueId = useIsomorphicId();
  const cancelText = i18nBundle.getText(CANCEL);
  const saveText = i18nBundle.getText(SAVE);
  const headingText = i18nBundle.getText(SAVE_VIEW);
  const defaultCbLabel = i18nBundle.getText(SET_AS_DEFAULT);
  const publicCbLabel = i18nBundle.getText(PUBLIC);
  const applyAutomaticallyCbLabel = i18nBundle.getText(APPLY_AUTOMATICALLY);
  const inputLabelText = i18nBundle.getText(VIEW);
  const errorTextAlreadyExists = i18nBundle.getText(VARIANT_MANAGEMENT_ERROR_DUPLICATE);
  const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);
  const [isDefault, setDefault] = useState(selectedVariant.isDefault);
  const [isPublic, setPublic] = useState(selectedVariant.global);
  const [applyAutomatically, setApplyAutomatically] = useState(selectedVariant.applyAutomatically);
  const [variantName, setVariantName] = useState(selectedVariant.children);
  const [variantNameInvalid, setVariantNameInvalid] = useState(false);
  const [isInvalid, setIsInvalid] = useState(false);
  const handleInputChange = e => {
    if (typeof saveViewInputProps?.onInput === 'function') {
      saveViewInputProps.onInput(e);
    }
    const trimmedValue = trimAndRemoveSpaces(e.target.value);
    setVariantName(trimmedValue);
    if (variantNames.includes(trimmedValue)) {
      setVariantNameInvalid(errorTextAlreadyExists);
    } else if (trimmedValue.length === 0) {
      setVariantNameInvalid(errorTextEmpty);
    } else if (e.isInvalid) {
      setIsInvalid(true);
    } else {
      setVariantNameInvalid(false);
      setIsInvalid(false);
    }
  };
  const onSave = e => {
    if (variantNames.includes(variantName)) {
      setVariantNameInvalid(errorTextAlreadyExists);
      inputRef.current?.focus();
    } else if (variantName.length === 0) {
      setVariantNameInvalid(errorTextEmpty);
      inputRef.current?.focus();
    } else if (isInvalid) {
      inputRef.current?.focus();
    } else {
      setVariantNameInvalid(false);
      handleSave(e, {
        ...selectedVariant,
        children: variantName,
        isDefault,
        global: isPublic,
        applyAutomatically
      });
    }
  };
  const handleClose = e => {
    if (e.detail.escPressed) {
      handleCancel(e);
    } else {
      onAfterClose(e);
    }
  };
  const handleCancel = e => {
    if (typeof onSaveViewCancel === 'function') {
      onSaveViewCancel(enrichEventWithDetails(e, {
        ...selectedVariant,
        children: variantName,
        isDefault,
        global: isPublic,
        applyAutomatically,
        isInvalid
      }));
    }
    setIsInvalid(false);
    inputRef.current.isInvalid = false;
    saveViewDialogRef.current.close();
  };
  const handleChangeDefault = e => {
    setDefault(e.target.checked);
  };
  const handleChangePublic = e => {
    setPublic(e.target.checked);
  };
  const handleChangeApplyAutomatically = e => {
    setApplyAutomatically(e.target.checked);
  };
  const canRenderPortal = useCanRenderPortal();
  if (!canRenderPortal) {
    return null;
  }
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Dialog, {
    open: true,
    className: classNames.dialog,
    ref: saveViewDialogRef,
    headerText: headingText,
    onAfterClose: onAfterClose,
    onBeforeClose: handleClose,
    initialFocus: `view-${uniqueId}`,
    footer: /*#__PURE__*/React.createElement(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Emphasized,
        onClick: onSave
      }, saveText), /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Transparent,
        onClick: handleCancel
      }, cancelText))
    })
  }, /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    alignItems: FlexBoxAlignItems.Start
  }, /*#__PURE__*/React.createElement(Label, {
    for: `view-${uniqueId}`,
    showColon: true
  }, inputLabelText), /*#__PURE__*/React.createElement(Input, {
    accessibleName: inputLabelText,
    ref: inputRef,
    ...saveViewInputProps,
    valueState: saveViewInputProps?.valueState ?? (!variantNameInvalid ? 'None' : 'Error'),
    valueStateMessage: saveViewInputProps?.valueStateMessage ?? /*#__PURE__*/React.createElement("div", null, variantNameInvalid),
    className: clsx(classNames.input, saveViewInputProps?.className),
    id: `view-${uniqueId}`,
    value: variantName,
    onInput: handleInputChange
  }), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Start,
    direction: FlexBoxDirection.Column,
    className: classNames.checkBoxesContainer
  }, showSetAsDefault && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangeDefault,
    text: defaultCbLabel,
    checked: isDefault
  }), showShare && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangePublic,
    text: publicCbLabel,
    checked: isPublic
  }), showApplyAutomatically && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangeApplyAutomatically,
    text: applyAutomaticallyCbLabel,
    checked: applyAutomatically
  })))), portalContainer ?? document.body);
};