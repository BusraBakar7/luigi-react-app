'use client';

import { useI18nBundle, useIsomorphicId, useStylesheet } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { CLOSE_POPOVER, SHOW_FULL_TEXT, SHOW_LESS, SHOW_MORE } from '../../i18n/i18n-defaults.js';
import { useCanRenderPortal } from '../../internal/ssr.js';
import { getUi5TagWithSuffix } from '../../internal/utils.js';
import { Link } from '../../webComponents/index.js';
import { ResponsivePopover } from '../../webComponents/ResponsivePopover/index.js';
import { Text } from '../Text/index.js';
import { classNames, styleData } from './ExpandableText.module.css.js';
/**
 * The `ExpandableText` component can be used to display long texts inside a table, list or form.
 *
 * Initially, only the first characters from the text are shown with a "Show More" link which allows the full text to be displayed. The `showOverflowInPopover` property determines if the full text will be displayed expanded in place (default) or in a popover (`showOverflowInPopover: true`). If the text is expanded a "Show Less" link is displayed, which allows collapsing the text field.
 *
 * @since 1.23.0
 */
const ExpandableText = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    emptyIndicator,
    renderWhitespace,
    hyphenated,
    showOverflowInPopover,
    maxCharacters = 100,
    portalContainer,
    className,
    ...rest
  } = props;
  useStylesheet(styleData, ExpandableText.displayName);
  const [collapsed, setCollapsed] = useState(true);
  const [popoverOpen, setPopoverOpen] = useState(false);
  const linkRef = useRef(null);
  const uniqueId = useIsomorphicId();
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const trimmedChildren = renderWhitespace ? children : children?.replace(/\s+/g, ' ').trim();
  const isOverflow = trimmedChildren?.length >= maxCharacters;
  const strippedChildren = isOverflow && (collapsed || showOverflowInPopover) ? trimmedChildren?.slice(0, maxCharacters) : children;
  const handleClick = () => {
    if (showOverflowInPopover) {
      setPopoverOpen(prev => !prev);
    }
    setCollapsed(prev => !prev);
  };
  const closePopover = () => {
    setCollapsed(true);
    setPopoverOpen(false);
  };
  useEffect(() => {
    const tagName = getUi5TagWithSuffix('ui5-link');
    void customElements.whenDefined(tagName).then(() => {
      if (linkRef.current) {
        if (showOverflowInPopover) {
          linkRef.current.accessibilityAttributes = {
            hasPopup: 'Dialog'
          };
        } else {
          linkRef.current.accessibilityAttributes = {
            expanded: !collapsed
          };
        }
      }
    });
  }, [collapsed, showOverflowInPopover]);
  const canRenderPortal = useCanRenderPortal();
  if (showOverflowInPopover && !canRenderPortal) {
    return null;
  }
  return /*#__PURE__*/React.createElement("span", {
    className: clsx(classNames.expandableText, className),
    ...rest,
    ref: ref
  }, /*#__PURE__*/React.createElement(Text, {
    emptyIndicator: emptyIndicator,
    renderWhitespace: renderWhitespace,
    hyphenated: hyphenated,
    className: classNames.text
  }, strippedChildren), isOverflow && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: classNames.ellipsis
  }, showOverflowInPopover || collapsed ? 'â€¦ ' : ' '), /*#__PURE__*/React.createElement(Link, {
    accessibleName: showOverflowInPopover ? collapsed ? i18nBundle.getText(CLOSE_POPOVER) : i18nBundle.getText(SHOW_FULL_TEXT) : undefined,
    accessibleRole: "button",
    onClick: handleClick,
    ref: linkRef,
    id: `${uniqueId}-link`
  }, collapsed ? i18nBundle.getText(SHOW_MORE) : i18nBundle.getText(SHOW_LESS))), showOverflowInPopover && popoverOpen && /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(ResponsivePopover, {
    opener: `${uniqueId}-link`,
    open: true,
    onAfterClose: closePopover,
    className: classNames.popover
  }, /*#__PURE__*/React.createElement(Text, {
    renderWhitespace: renderWhitespace,
    hyphenated: hyphenated,
    className: classNames.text
  }, children)), portalContainer ?? document.body));
});
ExpandableText.displayName = 'ExpandableText';
export { ExpandableText };