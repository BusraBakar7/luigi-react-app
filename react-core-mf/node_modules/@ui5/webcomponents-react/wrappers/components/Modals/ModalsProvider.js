import React, { useMemo, useReducer } from 'react';
import { createPortal } from 'react-dom';
import { getModalContext } from '../../internal/ModalsContext.js';
//@ts-expect-error: can't assume state generics at this point
const modalStateReducer = (state, action) => {
  switch (action.type) {
    case 'set':
      return [...state, action.payload];
    case 'reset':
      return state.filter(modal => modal.id !== action.payload.id);
    default:
      return state;
  }
};
export function ModalsProvider({
  children
}) {
  const [modals, setModal] = useReducer(modalStateReducer, []);

  // necessary for static method
  globalThis['@ui5/webcomponents-react'] ??= {};
  globalThis['@ui5/webcomponents-react'].setModal = setModal;
  const GlobalModalsContext = getModalContext();
  const memoizedVal = useMemo(() => ({
    setModal: globalThis['@ui5/webcomponents-react'].setModal
  }), []);
  return /*#__PURE__*/React.createElement(GlobalModalsContext.Provider, {
    value: memoizedVal
  }, modals.map(modal => {
    if (modal?.Component) {
      return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(modal.Component, {
        ...modal.props,
        ref: modal.ref,
        key: modal.id,
        "data-id": modal.id
      }), modal.container ?? document.body);
    }
  }), children);
}