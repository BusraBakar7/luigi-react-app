import type { ReactNode } from 'react';
import React from 'react';
import type { CommonProps } from '../../types/index.js';
export interface TextPropTypes extends CommonProps {
    /**
     * Pass the text as direct child of Text.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
     */
    children?: ReactNode;
    /**
     * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.
     */
    renderWhitespace?: boolean;
    /**
     * Defines whether the text wraps when there is not enough space.
     */
    wrapping?: boolean;
    /**
     * Limits the number of lines for wrapping texts.
     */
    maxLines?: number;
    /**
     * Specifies if an empty indicator should be displayed when there is no text.
     *
     * @since 1.23.0
     */
    emptyIndicator?: boolean;
    /**
     * Defines the type of text wrapping to be used (hyphenated or normal).
     *
     * __Note:__ This prop only takes effect if the `wrapping` prop is set to `true`.
     *
     * @since 1.23.0
     */
    hyphenated?: boolean;
}
/**
 * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.
 *
 * __Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.
 */
declare const Text: React.ForwardRefExoticComponent<TextPropTypes & React.RefAttributes<HTMLSpanElement>>;
export { Text };
