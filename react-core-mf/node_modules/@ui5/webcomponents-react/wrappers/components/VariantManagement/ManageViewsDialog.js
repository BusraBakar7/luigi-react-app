import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, useI18nBundle, useIsomorphicId, useStylesheet } from '@ui5/webcomponents-react-base';
import React, { Children, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { BarDesign, ButtonDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums/index.js';
import { APPLY_AUTOMATICALLY, CANCEL, CREATED_BY, DEFAULT, MANAGE_VIEWS, SAVE, SEARCH, SHARING, VIEW } from '../../i18n/i18n-defaults.js';
import { useCanRenderPortal } from '../../internal/ssr.js';
import { Bar } from '../../webComponents/Bar/index.js';
import { Button } from '../../webComponents/Button/index.js';
import { Dialog } from '../../webComponents/Dialog/index.js';
import { Icon, Input } from '../../webComponents/index.js';
import { Table } from '../../webComponents/Table/index.js';
import { TableColumn } from '../../webComponents/TableColumn/index.js';
import { FlexBox } from '../FlexBox/index.js';
import { classNames, styleData } from './ManageViewsDialog.module.css.js';
import { ManageViewsTableRows } from './ManageViewsTableRows.js';
export const ManageViewsDialog = props => {
  const {
    children,
    onAfterClose,
    handleSaveManageViews,
    showShare,
    showApplyAutomatically,
    showSetAsDefault,
    showCreatedBy,
    variantNames,
    portalContainer,
    showOnlyFavorites,
    onManageViewsCancel
  } = props;
  const uniqueId = useIsomorphicId();
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const cancelText = i18nBundle.getText(CANCEL);
  const saveText = i18nBundle.getText(SAVE);
  const viewHeaderText = i18nBundle.getText(VIEW);
  const sharingHeaderText = i18nBundle.getText(SHARING);
  const defaultHeaderText = i18nBundle.getText(DEFAULT);
  const applyAutomaticallyHeaderText = i18nBundle.getText(APPLY_AUTOMATICALLY);
  const createdByHeaderText = i18nBundle.getText(CREATED_BY);
  const manageViewsText = i18nBundle.getText(MANAGE_VIEWS);
  const searchText = i18nBundle.getText(SEARCH);
  const [changedVariantNames, setChangedVariantNames] = useState(new Map());
  const [invalidVariants, setInvalidVariants] = useState({});
  useStylesheet(styleData, 'ManageViewsDialog');
  const columns = /*#__PURE__*/React.createElement(React.Fragment, null, showOnlyFavorites && /*#__PURE__*/React.createElement(TableColumn, {
    key: "favorite-variant-item"
  }), /*#__PURE__*/React.createElement(TableColumn, null, viewHeaderText), showShare && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600
  }, sharingHeaderText), showSetAsDefault && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: defaultHeaderText
  }, defaultHeaderText), showApplyAutomatically && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: applyAutomaticallyHeaderText
  }, applyAutomaticallyHeaderText), showCreatedBy && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: createdByHeaderText
  }, createdByHeaderText), /*#__PURE__*/React.createElement(TableColumn, {
    key: "delete-variant-item"
  }));
  const [childrenProps, setChildrenProps] = useState(Children.map(children, child => {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return {};
    }
    return child.props;
  }));
  useEffect(() => {
    setChildrenProps(Children.map(children, child => {
      if (! /*#__PURE__*/React.isValidElement(child)) {
        return {};
      }
      return child.props;
    }));
  }, [children]);
  const [filteredProps, setFilteredProps] = useState(childrenProps);
  useEffect(() => {
    setFilteredProps(childrenProps);
  }, [childrenProps]);
  const [defaultView, setDefaultView] = useState();
  const changedTableRows = useRef({});
  const handleTableRowChange = (e, payload) => {
    if (payload) {
      changedTableRows.current[payload.currentVariant] = {
        ...(changedTableRows.current[payload.currentVariant] ?? {}),
        ...payload
      };
    }
  };
  const deletedTableRows = useRef(new Set([]));
  const handleDelete = e => {
    deletedTableRows.current.add(e.target.dataset.children);
    setChildrenProps(prev => prev.filter(item => item.children !== e.target.dataset.children).map(item => {
      if (changedTableRows.current.hasOwnProperty(item.children)) {
        return {
          ...item,
          ...changedTableRows.current[item.children]
        };
      }
      return item;
    }));
  };
  const handleSave = e => {
    if (Object.keys(invalidVariants).length === 0) {
      handleSaveManageViews(e, {
        updatedRows: changedTableRows.current,
        defaultView,
        deletedRows: deletedTableRows.current
      });
    } else {
      Object.values(invalidVariants)[0].focus();
    }
  };
  const handleClose = e => {
    if (e.detail.escPressed) {
      handleCancel(e);
    } else {
      onAfterClose(e);
    }
  };
  const handleCancel = e => {
    if (typeof onManageViewsCancel === 'function') {
      onManageViewsCancel(enrichEventWithDetails(e, {
        invalidVariants
      }));
    }
    setInvalidVariants(prev => {
      Object.values(prev).forEach(item => {
        item.isInvalid = false;
      });
      return {};
    });
    onAfterClose(e);
  };
  const handleSearchInput = e => {
    const lowerCaseVal = e.target.value.toLowerCase();
    setFilteredProps(childrenProps.filter(item => item.children?.toLowerCase()?.includes(lowerCaseVal) || item.author?.toLowerCase()?.includes(lowerCaseVal)));
  };
  const canRenderPortal = useCanRenderPortal();
  if (!canRenderPortal) {
    return null;
  }
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Dialog, {
    open: true,
    className: classNames.manageViewsDialog,
    "data-component-name": "VariantManagementManageViewsDialog",
    onAfterClose: onAfterClose,
    onBeforeClose: handleClose,
    headerText: manageViewsText,
    initialFocus: `search-${uniqueId}`,
    header: /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      style: {
        width: '100%'
      },
      alignItems: FlexBoxAlignItems.Center
    }, /*#__PURE__*/React.createElement("h2", {
      className: classNames.headerText
    }, manageViewsText), /*#__PURE__*/React.createElement(Input, {
      id: `search-${uniqueId}`,
      className: classNames.search,
      placeholder: searchText,
      showClearIcon: true,
      icon: /*#__PURE__*/React.createElement(Icon, {
        name: searchIcon,
        className: classNames.inputIcon
      }),
      onInput: handleSearchInput
    })),
    resizable: true,
    footer: /*#__PURE__*/React.createElement(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Emphasized,
        onClick: handleSave
      }, saveText), /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Transparent,
        onClick: handleCancel
      }, cancelText))
    })
  }, /*#__PURE__*/React.createElement(Table, {
    columns: columns,
    stickyColumnHeader: true,
    role: "table"
  }, filteredProps.map(itemProps => {
    return /*#__PURE__*/React.createElement(ManageViewsTableRows, {
      ...itemProps,
      setInvalidVariants: setInvalidVariants,
      setChangedVariantNames: setChangedVariantNames,
      changedVariantNames: changedVariantNames,
      variantNames: variantNames,
      handleRowChange: handleTableRowChange,
      handleDelete: handleDelete,
      defaultView: defaultView,
      setDefaultView: setDefaultView,
      showShare: showShare,
      showApplyAutomatically: showApplyAutomatically,
      showSetAsDefault: showSetAsDefault,
      showCreatedBy: showCreatedBy,
      key: itemProps?.children,
      showOnlyFavorites: showOnlyFavorites
    });
  }))), portalContainer ?? document.body);
};