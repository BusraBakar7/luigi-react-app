import type { ComponentType, Dispatch, RefCallback, RefObject } from 'react';
export interface UpdateModalStateAction<Props, DomRef, ContainerElement = HTMLElement> {
    type: 'set' | 'reset';
    payload?: ModalState<Props, DomRef, ContainerElement> | {
        id: string;
    };
}
export interface ModalState<Props, DomRef, ContainerElement> {
    Component: ComponentType;
    props: Props;
    ref: RefObject<DomRef> | RefCallback<DomRef>;
    container: ContainerElement;
    id: string;
}
interface IModalsContext<Props, DomRef> {
    setModal?: Dispatch<UpdateModalStateAction<Props, DomRef>>;
}
export declare function getModalContext(): any;
export declare const useModalsContext: () => IModalsContext<Record<string, any>, HTMLElement>;
export {};
